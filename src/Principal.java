
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author csalfonsol
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        format = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        original = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();
        copyClip = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Procesador biblico");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        format.setText("Aplicar formato");
        format.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        format.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatActionPerformed(evt);
            }
        });

        original.setColumns(20);
        original.setRows(5);
        jScrollPane1.setViewportView(original);

        result.setColumns(20);
        result.setLineWrap(true);
        result.setRows(5);
        jScrollPane2.setViewportView(result);

        copyClip.setBackground(new java.awt.Color(30, 147, 159));
        copyClip.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        copyClip.setForeground(new java.awt.Color(29, 46, 91));
        copyClip.setText("Copiar");
        copyClip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyClipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1094, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(copyClip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(format, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(format, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(copyClip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatActionPerformed
                
        /* APLICAR FORMATO REQUERIDO A PASAJE BIBLICO */               
        result.setText(formatText(original.getText()));                            
    }//GEN-LAST:event_formatActionPerformed

    private void copyClipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyClipActionPerformed
        
        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection data = new StringSelection(result.getText());
        clip.setContents(data, data); 
    }//GEN-LAST:event_copyClipActionPerformed

    public static String formatText(String passage) {

      // Pasaje resultante
      String resultado = "";
      String saltoDeLinea = "\n";
      String preEspaciado = "  ";
      String postEspaciado = "  ";
      int posicion = 0;
      // Bandera para el encabezado del pasaje (Ubicacion, Version, y titulo (opcional)
      boolean encabezado = false;
      
      // Bandera para saber si es la primera linea del pasaje
      boolean primeraLinea = true;
      
      // Se normalizan los dobles saltos de linea dejando uno solo
      passage = passage.replaceAll(saltoDeLinea + saltoDeLinea, saltoDeLinea);
      
      // Si no comienza con un renglon en blanco (salto de linea), se le agrega uno al comienzo
      if (!passage.substring(0, 1).equals(saltoDeLinea))
        resultado = saltoDeLinea;
      
      // Se inicia el pasaje con dos espacios
      resultado += "  ";
            
      // Se recorre cada linea del ENCABEZADO del pasaje
      for (int i = 0; i < passage.length(); i++) {       
        // Salto de linea
        if (passage.substring(i, i+1).equals(saltoDeLinea)){
            // resultado += "XXXX";
            resultado += saltoDeLinea;
            
            // Comienza el primer versiculo
            if (esNumerico(passage.substring(i+1, i+2))){
                
                // El pre-espaciado del cuerpo es de 3 espacios
                preEspaciado += " ";
                
                // Se deja un espacio en blanco entre el encabezado y el cuerpo del pasaje
                resultado += saltoDeLinea;
                resultado += preEspaciado;               
                
                posicion = i+1;
                break;
            }            
            resultado += preEspaciado;
        }
        // Caracter normal
        else {
            resultado += passage.substring(i, i+1);
        }
      }
      
      // Se recorre cada linea del CUERPO del pasaje
      for (int i = posicion; i < passage.length(); i++) {
        // Salto de linea
        if (passage.substring(i, i+1).equals(saltoDeLinea)){
            resultado += postEspaciado;
            resultado += saltoDeLinea;                                    
            resultado += preEspaciado;
        }
        // Caracter normal
        else {
            resultado += passage.substring(i, i+1);
        }
      }
            
      // TODO: Si la cadena No tiene al final un salto de linea se le añade
      
      // Al final se agrega un post-espaciado y un salto de linea mas
      resultado += postEspaciado;         
      resultado += saltoDeLinea;         
      
      return resultado;
        
    }
    
    // Metodo auxiliar para validar si un caracter es nunerico
    public static boolean esNumerico(String caracter) {
        
        if (caracter.equals("0")||caracter.equals("1")||caracter.equals("2")||caracter.equals("3")||
            caracter.equals("4")||caracter.equals("5")||caracter.equals("6")||caracter.equals("7")||
            caracter.equals("8")||caracter.equals("9")){
            return true;
        }
        return false;
        
    }
    
    public static String peticionHttpGet(String urlParaVisitar, String apiKey) throws Exception {
        // Esto es lo que vamos a devolver
        StringBuilder resultado = new StringBuilder();
        // Crear un objeto de tipo URL
        URL url = new URL(urlParaVisitar);

        // Abrir la conexión e indicar que será de tipo GET
        HttpURLConnection conexion = (HttpURLConnection) url.openConnection();
        conexion.setRequestMethod("GET");
        conexion.setRequestProperty("api-key", apiKey);
                                
        // Búferes para leer
        BufferedReader rd = new BufferedReader(new InputStreamReader(conexion.getInputStream()));
        String linea;
                
        // Mientras el BufferedReader se pueda leer, agregar contenido a resultado
        while ((linea = rd.readLine()) != null) {
          resultado.append(linea);
        }
        // Cerrar el BufferedReader
        rd.close();
        // Regresar resultado, pero como cadena, no como StringBuilder
        return resultado.toString();
    }
    
    public static String solicitarPasaje(String versionBiblia, String citaBiblica) throws Exception {
        
        // OBTENER TEXTOS BIBLICOS DE WEB SERVICE
      
        // String urlBibles = "https://api.scripture.api.bible/v1/bibles/" + versionBiblia;
        
        String urlPassage = "https://api.scripture.api.bible/v1/bibles/" + versionBiblia +
        "/passages/" + citaBiblica + 
        "?content-type=text&include-notes=false&include-titles=true&include-chapter-numbers=true&include-verse-numbers=true&include-verse-spans=true&use-org-id=false";

        String apiKey = "1d0a6c3e53bad92445ddc866aa62bfd4";      
        String resultText = peticionHttpGet(urlPassage,apiKey);

        return resultText;
        
    }
    
    
    /*  
        = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
        Cada libro es una lista de listas              
        Cada lista dentro del libro será un capitulo
        Y cada elemento dentro de cada lista-capitulo sera un versiculo     
        = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
    */
    
    
    // Metodo que recibe el nombre de un libro, un capitulo y versiculo.
    // Retorna el texto biblico correspondiente
    public static String printBiblicText(String bookName, String chapter, String verse) {

        // Variable donde se guardara el texto biblico final
        String text;
        
        // = = = OBTENER EL LIBRO = = =
        File folder = new File("src/assets/");    
        String pathFile = extractBook(bookName);

        System.out.println(pathFile);
        
        File file = new File(pathFile); 
        BufferedReader br = null; 
        try {br = new BufferedReader(new FileReader(file));} 
        catch (FileNotFoundException ex) {System.out.println("Error leyendo el archivo");}   
        
        
        // = = = OBTENER EL CAPITULO = = =                                                        
        String linea; 
        try {
            // iteramos hasta encontrar la linea con el capitulo y el versiculo solicitados
            while ((linea = br.readLine()) != null){                                                 
               
                System.out.println(extractChapter(linea) + " " + extractVerse(linea));
                
                if (extractChapter(linea).equals(chapter) && extractVerse(linea).equals(verse)){
                    return getBiblicVerse(linea);
                }
                                                     
            }
        } catch (IOException ex) {System.out.println("Error leyendo la linea");}
        
        return "TEXTO BIBLICO NO ENCONTRADO";
        
        /* List<List<String>> book = new ArrayList<>();
                                                
        String linea; 
        int conteo = 0;
        String currentChapter = "0";     

        try {
            // iteramos mientras hayan lineas en el archivo
            while ((linea = br.readLine()) != null){                                                 

                // Miramos si el capitulo actual ha cambiado                   
                if (!extractChapter(linea).equals(currentChapter)){
                    // Creamos un nuevo capitulo
                    book.add(new ArrayList<>());
                    currentChapter = extractChapter(linea);
                }

                // Se agrega el versiculo en el libro, en el capitulo (sublista) correspondiente
                book.get(Integer.parseInt(currentChapter)-1).add(extractVerse(linea));                        
            }
        } catch (IOException ex) {System.out.println("Error leyendo la linea");}
        */              
    }
    
    // DEPRECATED
    public static String printVerse(List<List<String>> book, int chapter, int verse) {

        // Debemos restarle 1 al index de capitulo y 1 al index del versiculo
        String result = book.get(chapter-1).get(verse-1);   
        
        return result;
    }
    
     // Metodo para obtener el texto biblico de una línea del archivo de origen
    public static String getBiblicVerse(String line) {
        
        String text;

        // Removemos el pre-texto inutil
        text = line.substring(line.indexOf("'")+1,line.length());

        // Removemos el post-texto inutil
        text = text.substring(0,text.indexOf("'"));

        return text;

    }
  
    // Metodo para obtener el versiculo de una línea del archivo de origen
    public static String extractVerse(String line) {
        
        String verse;

        // Removemos el id del libro
        verse = line.substring(line.indexOf(",")+1,line.length());
        // Removemos el capitulo del libro y el espacio entre este y el versiculo (+2)
        verse = verse.substring(verse.indexOf(",")+2,verse.length());

        // Removemos el texto biblico (solo buscamos el versiculo
        verse = verse.substring(0,verse.indexOf(","));

        return verse;

    }
    
    // Metodo que busca el capitulo de una linea del archivo de origen
    public static String extractChapter(String line) {
        
        String chapter;

        // Removemos el pre-texto inutil
        chapter = line.substring(line.indexOf(",")+2,line.length());

        // Removemos el post-texto inutil
        chapter = chapter.substring(0,chapter.indexOf(","));

        return chapter;

    }
    
    
    // Metodo que busca en el directorio assets, el libro con el nombre dado
    // Retorna el path para acceder al archivo del libro
    public static String extractBook(String name) {                

        File folder = new File("src/assets/");    
        String pathFile = "src/assets/";
        
        for (int i = 0; i < folder.listFiles().length; i++) {
            if (folder.listFiles()[i].getName().contains(name))
                return pathFile += folder.listFiles()[i].getName();            
        }
        return null;

    }

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                                                              
                
                /*
                
                    ENTRADAS PRINCIPALES DEL USUARIO:
                
                    LIBRO
                    CAPITULO
                    VERSICULOS
                
                */
                
                   
                
                
                System.out.println(printBiblicText("salmos", "150", "6"));
                
                
                
               
                // System.out.println(printVerse(book, 1, 5)); 
                // System.out.println(book.size()); 
                
                
                // System.out.println(printVerse(tito, 119, 100));                
                
                
                //new Principal().setVisible(true);                              
                
                /* Parametros de ejemplo 
                String reinaValera = "592420522e16049f-01";
                String citaEjemplo = "ROM.12.1-ROM.12.4";
                
                // Llamado a la peticion del web service //
                try {                    
                    // System.out.println(solicitarPasaje(reinaValera,citaEjemplo));
                    result.setText(solicitarPasaje(reinaValera,citaEjemplo));
                } catch (Exception ex) {
                    System.out.println("Ocurrio un error haciendo la peticion: ");
                    ex.printStackTrace();
                }*/
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyClip;
    private javax.swing.JButton format;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea original;
    private static javax.swing.JTextArea result;
    // End of variables declaration//GEN-END:variables
}
